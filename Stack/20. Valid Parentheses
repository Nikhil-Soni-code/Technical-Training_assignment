import java.util.Stack;

class Solution {
    /**
     * Checks if a given string of parentheses is valid.
     * A string is valid if:
     * - Open brackets must be closed by the same type of brackets.
     * - Open brackets must be closed in the correct order.
     * - Every closing bracket has a corresponding opening bracket of the same type.
     * 
     * @param s The input string containing only '(', ')', '{', '}', '[' and ']'.
     * @return true if the string is valid, false otherwise.
     */
    public boolean isValid(String s) {
        if (s.length() == 1 || s.charAt(0) == ')' || s.charAt(0) == '}' || s.charAt(0) == ']') {
            return false;
        }
        
        Stack<Character> stack = new Stack<>();
        
        for (char ch : s.toCharArray()) {
            if (ch == '(' || ch == '[' || ch == '{') {
                stack.push(ch);
            } else {
                if (stack.isEmpty()) {
                    return false;
                }
                char brace;
                switch (ch) {
                    case ')': brace = '('; break;
                    case '}': brace = '{'; break;
                    case ']': brace = '['; break;
                    default: brace = ' ';
                }
                if (stack.peek() != brace) {
                    return false;
                } else {
                    stack.pop();
                }
            }
        }
        return stack.isEmpty();
    }

    // Sample test case for quick testing
    public static void main(String[] args) {
        Solution solution = new Solution();
        String testString = "()[]{}";
        System.out.println("Is the string valid? " + solution.isValid(testString));
    }
}
