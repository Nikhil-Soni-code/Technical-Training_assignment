import java.util.Stack;

class Solution {
    /**
     * Finds the next greater element for each element in nums1 within nums2.
     * The next greater element for an element x is the first greater element
     * to its right in nums2. If no greater element exists, return -1.
     *
     * @param nums1 The subset array whose next greater elements need to be found.
     * @param nums2 The reference array where next greater elements are searched.
     * @return An array containing the next greater elements for nums1.
     */
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack<>();
        stack.push(-1); // Default value if no greater element exists

        for (int i = nums2.length - 1; i >= 0; i--) {
            // Maintain monotonic decreasing stack
            while (stack.peek() != -1 && stack.peek() < nums2[i]) {
                stack.pop();
            }

            // Replace nums1[j] with next greater element found in nums2
            for (int j = 0; j < nums1.length; j++) {
                if (nums1[j] == nums2[i]) {
                    nums1[j] = stack.peek();
                    break;
                }
            }

            stack.push(nums2[i]);
        }
        return nums1;
    }
